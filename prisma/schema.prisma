// Prisma Client Generator
generator client {
  provider = "prisma-client-js"
}

// Database Connection
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ================================
// üöÄ Tenant Model (Multitenancy)
// ================================
model Tenant {
  id        String   @id @default(cuid()) @map("_id")
  name      String
  subdomain String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // One-to-Many: A Tenant can have multiple Users
  users User[] @relation("TenantUsers")

  // One-to-One: A Tenant can have one Owner User
  ownerId String? @unique
  owner   User?   @relation("TenantOwner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

// ================================
// üë§ User Model
// ================================
model User {
  id            String   @id @default(cuid()) @map("_id")
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Tenant Relationship (One-to-Many)
  tenantId String?
  tenant   Tenant? @relation("TenantUsers", fields: [tenantId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  // Tenant Ownership (One-to-One, Inverse Side)
  ownedTenant Tenant?   @relation("TenantOwner")
  Session     Session[]
  Account     Account[]
}

// ================================
// üîë Session Model
// ================================
model Session {
  id        String   @id @default(cuid()) @map("_id")
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ipAddress String?
  userAgent String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// ================================
// üõ°Ô∏è Account Model
// ================================
model Account {
  id         String @id @default(cuid()) @map("_id")
  providerId String
  accountId  String
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ================================
// üìß Verification Model
// ================================
model Verification {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  value      String
  expiresAt  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
